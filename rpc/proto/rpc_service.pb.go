// Code generated by protoc-gen-go.
// source: rpc_service.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RpcService service

type RpcServiceClient interface {
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := grpc.Invoke(ctx, "/proto.RpcService/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/proto.RpcService/ElectLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	ElectLeader(context.Context, *VoteRequest) (*VoteResponse, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).KeepAlive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_ElectLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).ElectLeader(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _RpcService_KeepAlive_Handler,
		},
		{
			MethodName: "ElectLeader",
			Handler:    _RpcService_ElectLeader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2a, 0x48, 0x8e,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x52, 0xbc, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0x50, 0x51, 0xa3, 0x16, 0x46, 0x2e, 0xae,
	0xa0, 0x82, 0xe4, 0x60, 0x88, 0x52, 0x21, 0x3b, 0x2e, 0x4e, 0xef, 0xd4, 0xd4, 0x02, 0xc7, 0x9c,
	0xcc, 0xb2, 0x54, 0x21, 0x71, 0x88, 0x1a, 0x3d, 0xb8, 0x48, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71,
	0x89, 0x94, 0x04, 0xa6, 0x44, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x19, 0x17, 0xb7, 0x6b,
	0x4e, 0x6a, 0x72, 0x89, 0x4f, 0x6a, 0x62, 0x4a, 0x6a, 0x91, 0x90, 0x10, 0x54, 0x61, 0x58, 0x7e,
	0x09, 0x5c, 0xb3, 0x30, 0x8a, 0x18, 0x44, 0x5f, 0x12, 0x1b, 0x58, 0xcc, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x82, 0xfb, 0x3a, 0xc2, 0xb8, 0x00, 0x00, 0x00,
}
