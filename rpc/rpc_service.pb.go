// Code generated by protoc-gen-go.
// source: rpc_service.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RpcService service

type RpcServiceClient interface {
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	AppendLogEntries(ctx context.Context, in *AppendLogEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	UpdateConfiguration(ctx context.Context, in *AppendConfigEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) AppendLogEntries(ctx context.Context, in *AppendLogEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	out := new(AppendEntryResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/AppendLogEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) UpdateConfiguration(ctx context.Context, in *AppendConfigEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	out := new(AppendEntryResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/UpdateConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/ElectLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error) {
	out := new(InstallSnapshotResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/InstallSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	AppendLogEntries(context.Context, *AppendLogEntryRequest) (*AppendEntryResponse, error)
	UpdateConfiguration(context.Context, *AppendConfigEntryRequest) (*AppendEntryResponse, error)
	ElectLeader(context.Context, *VoteRequest) (*VoteResponse, error)
	InstallSnapshot(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).KeepAlive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_AppendLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).AppendLogEntries(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendConfigEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).UpdateConfiguration(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_ElectLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).ElectLeader(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InstallSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).InstallSnapshot(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _RpcService_KeepAlive_Handler,
		},
		{
			MethodName: "AppendLogEntries",
			Handler:    _RpcService_AppendLogEntries_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _RpcService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "ElectLeader",
			Handler:    _RpcService_ElectLeader_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _RpcService_InstallSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
