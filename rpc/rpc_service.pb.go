// Code generated by protoc-gen-go.
// source: rpc_service.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc_service.proto

It has these top-level messages:
	VoteRequest
	VoteResponse
	LeaderInfo
	KeepAliveRequest
	KeepAliveResponse
	AppendConfigEntryRequest
	AppendLogEntryRequest
	AppendEntryResponse
	InstallSnapshotRequest
	InstallSnapshotResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type VoteRequest struct {
	Term         uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LastLogIndex uint32 `protobuf:"varint,2,opt,name=last_log_index,json=lastLogIndex" json:"last_log_index,omitempty"`
	LastLogTerm  uint32 `protobuf:"varint,3,opt,name=last_log_term,json=lastLogTerm" json:"last_log_term,omitempty"`
	CandidateId  string `protobuf:"bytes,4,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VoteResponse struct {
	Term        uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted" json:"vote_granted,omitempty"`
}

func (m *VoteResponse) Reset()                    { *m = VoteResponse{} }
func (m *VoteResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()               {}
func (*VoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LeaderInfo struct {
	Term         uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	PrevLogIndex uint32 `protobuf:"varint,2,opt,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	PrevLogTerm  uint32 `protobuf:"varint,3,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	CommitIndex  uint32 `protobuf:"varint,4,opt,name=commit_index,json=commitIndex" json:"commit_index,omitempty"`
	LeaderId     string `protobuf:"bytes,5,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
}

func (m *LeaderInfo) Reset()                    { *m = LeaderInfo{} }
func (m *LeaderInfo) String() string            { return proto.CompactTextString(m) }
func (*LeaderInfo) ProtoMessage()               {}
func (*LeaderInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type KeepAliveRequest struct {
	LeaderInfo *LeaderInfo `protobuf:"bytes,1,opt,name=leader_info,json=leaderInfo" json:"leader_info,omitempty"`
}

func (m *KeepAliveRequest) Reset()                    { *m = KeepAliveRequest{} }
func (m *KeepAliveRequest) String() string            { return proto.CompactTextString(m) }
func (*KeepAliveRequest) ProtoMessage()               {}
func (*KeepAliveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeepAliveRequest) GetLeaderInfo() *LeaderInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

type KeepAliveResponse struct {
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *KeepAliveResponse) Reset()                    { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string            { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()               {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AppendConfigEntryRequest struct {
	LeaderInfo    *LeaderInfo                               `protobuf:"bytes,1,opt,name=leader_info,json=leaderInfo" json:"leader_info,omitempty"`
	NodeLocations map[string]*AppendConfigEntryRequest_Node `protobuf:"bytes,2,rep,name=node_locations,json=nodeLocations" json:"node_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppendConfigEntryRequest) Reset()                    { *m = AppendConfigEntryRequest{} }
func (m *AppendConfigEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendConfigEntryRequest) ProtoMessage()               {}
func (*AppendConfigEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppendConfigEntryRequest) GetLeaderInfo() *LeaderInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

func (m *AppendConfigEntryRequest) GetNodeLocations() map[string]*AppendConfigEntryRequest_Node {
	if m != nil {
		return m.NodeLocations
	}
	return nil
}

type AppendConfigEntryRequest_Node struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *AppendConfigEntryRequest_Node) Reset()         { *m = AppendConfigEntryRequest_Node{} }
func (m *AppendConfigEntryRequest_Node) String() string { return proto.CompactTextString(m) }
func (*AppendConfigEntryRequest_Node) ProtoMessage()    {}
func (*AppendConfigEntryRequest_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 1}
}

type AppendLogEntryRequest struct {
	LeaderInfo *LeaderInfo                       `protobuf:"bytes,1,opt,name=leader_info,json=leaderInfo" json:"leader_info,omitempty"`
	Entries    []*AppendLogEntryRequest_LogEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendLogEntryRequest) Reset()                    { *m = AppendLogEntryRequest{} }
func (m *AppendLogEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendLogEntryRequest) ProtoMessage()               {}
func (*AppendLogEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppendLogEntryRequest) GetLeaderInfo() *LeaderInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

func (m *AppendLogEntryRequest) GetEntries() []*AppendLogEntryRequest_LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendLogEntryRequest_LogEntry struct {
	Cmd   string `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AppendLogEntryRequest_LogEntry) Reset()         { *m = AppendLogEntryRequest_LogEntry{} }
func (m *AppendLogEntryRequest_LogEntry) String() string { return proto.CompactTextString(m) }
func (*AppendLogEntryRequest_LogEntry) ProtoMessage()    {}
func (*AppendLogEntryRequest_LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

type AppendEntryResponse struct {
	Term    uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntryResponse) Reset()                    { *m = AppendEntryResponse{} }
func (m *AppendEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntryResponse) ProtoMessage()               {}
func (*AppendEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type InstallSnapshotRequest struct {
	Term              uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId          string `protobuf:"bytes,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	LastIncludedIndex uint32 `protobuf:"varint,3,opt,name=last_included_index,json=lastIncludedIndex" json:"last_included_index,omitempty"`
	LastIncludedTerm  uint32 `protobuf:"varint,4,opt,name=last_included_term,json=lastIncludedTerm" json:"last_included_term,omitempty"`
	Offset            uint32 `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Data              []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Done              bool   `protobuf:"varint,7,opt,name=done" json:"done,omitempty"`
}

func (m *InstallSnapshotRequest) Reset()                    { *m = InstallSnapshotRequest{} }
func (m *InstallSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotRequest) ProtoMessage()               {}
func (*InstallSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type InstallSnapshotResponse struct {
	Term uint32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *InstallSnapshotResponse) Reset()                    { *m = InstallSnapshotResponse{} }
func (m *InstallSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotResponse) ProtoMessage()               {}
func (*InstallSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*VoteRequest)(nil), "rpc.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "rpc.VoteResponse")
	proto.RegisterType((*LeaderInfo)(nil), "rpc.LeaderInfo")
	proto.RegisterType((*KeepAliveRequest)(nil), "rpc.KeepAliveRequest")
	proto.RegisterType((*KeepAliveResponse)(nil), "rpc.KeepAliveResponse")
	proto.RegisterType((*AppendConfigEntryRequest)(nil), "rpc.AppendConfigEntryRequest")
	proto.RegisterType((*AppendConfigEntryRequest_Node)(nil), "rpc.AppendConfigEntryRequest.Node")
	proto.RegisterType((*AppendLogEntryRequest)(nil), "rpc.AppendLogEntryRequest")
	proto.RegisterType((*AppendLogEntryRequest_LogEntry)(nil), "rpc.AppendLogEntryRequest.LogEntry")
	proto.RegisterType((*AppendEntryResponse)(nil), "rpc.AppendEntryResponse")
	proto.RegisterType((*InstallSnapshotRequest)(nil), "rpc.InstallSnapshotRequest")
	proto.RegisterType((*InstallSnapshotResponse)(nil), "rpc.InstallSnapshotResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RpcService service

type RpcServiceClient interface {
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	AppendLogEntries(ctx context.Context, in *AppendLogEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	UpdateConfiguration(ctx context.Context, in *AppendConfigEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error)
	ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) AppendLogEntries(ctx context.Context, in *AppendLogEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	out := new(AppendEntryResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/AppendLogEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) UpdateConfiguration(ctx context.Context, in *AppendConfigEntryRequest, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	out := new(AppendEntryResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/UpdateConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) ElectLeader(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/ElectLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error) {
	out := new(InstallSnapshotResponse)
	err := grpc.Invoke(ctx, "/rpc.RpcService/InstallSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	AppendLogEntries(context.Context, *AppendLogEntryRequest) (*AppendEntryResponse, error)
	UpdateConfiguration(context.Context, *AppendConfigEntryRequest) (*AppendEntryResponse, error)
	ElectLeader(context.Context, *VoteRequest) (*VoteResponse, error)
	InstallSnapshot(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).KeepAlive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_AppendLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).AppendLogEntries(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendConfigEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).UpdateConfiguration(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_ElectLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).ElectLeader(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RpcService_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InstallSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).InstallSnapshot(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _RpcService_KeepAlive_Handler,
		},
		{
			MethodName: "AppendLogEntries",
			Handler:    _RpcService_AppendLogEntries_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _RpcService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "ElectLeader",
			Handler:    _RpcService_ElectLeader_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _RpcService_InstallSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x96, 0x93, 0xf4, 0x27, 0xe3, 0xa4, 0x4d, 0xb6, 0xa7, 0x3d, 0x96, 0x7b, 0x8e, 0x04, 0x06,
	0x09, 0x2e, 0x20, 0xaa, 0xc2, 0x4d, 0x55, 0x09, 0xa4, 0xaa, 0x54, 0x10, 0x11, 0xf5, 0xc2, 0xe5,
	0xe7, 0x32, 0x32, 0xf6, 0x26, 0xb5, 0x70, 0x76, 0x8d, 0xbd, 0x89, 0xe8, 0x4b, 0xf0, 0x20, 0x3c,
	0x03, 0x6f, 0xc0, 0x6b, 0x20, 0xf1, 0x1a, 0xec, 0xce, 0xae, 0x8d, 0x93, 0x36, 0x41, 0x82, 0xbb,
	0xf1, 0xb7, 0xdf, 0x7c, 0xbb, 0x33, 0xb3, 0xdf, 0x1a, 0xba, 0x59, 0x1a, 0x8e, 0x72, 0x9a, 0xcd,
	0xe3, 0x90, 0xf6, 0xd2, 0x8c, 0x0b, 0x4e, 0xea, 0x12, 0xf2, 0x3e, 0x5b, 0x60, 0xbf, 0xe5, 0x82,
	0xfa, 0xf4, 0xe3, 0x8c, 0xe6, 0x82, 0x10, 0x68, 0x08, 0x9a, 0x4d, 0x1d, 0xeb, 0x8e, 0xf5, 0xb0,
	0xed, 0x63, 0x4c, 0xee, 0xc3, 0x4e, 0x12, 0xe4, 0x62, 0x94, 0xf0, 0xc9, 0x28, 0x66, 0x11, 0xfd,
	0xe4, 0xd4, 0x70, 0xb5, 0xa5, 0xd0, 0x21, 0x9f, 0x0c, 0x14, 0x46, 0x3c, 0x68, 0x97, 0x2c, 0x94,
	0xa8, 0x23, 0xc9, 0x36, 0xa4, 0xd7, 0x4a, 0xe9, 0x2e, 0xb4, 0xc2, 0x80, 0x45, 0x71, 0x14, 0x08,
	0x3a, 0x8a, 0x23, 0xa7, 0x21, 0x29, 0x4d, 0xdf, 0x2e, 0xb1, 0x41, 0xe4, 0x9d, 0x43, 0x4b, 0x9f,
	0x27, 0x4f, 0x39, 0xcb, 0xe9, 0xad, 0x07, 0x92, 0x32, 0x73, 0xc9, 0x19, 0x4d, 0xb2, 0x80, 0x09,
	0x1a, 0xe1, 0x71, 0xb6, 0x7d, 0x5b, 0x61, 0x2f, 0x34, 0xe4, 0x7d, 0xb1, 0x00, 0x86, 0x34, 0x88,
	0x68, 0x36, 0x60, 0x63, 0xbe, 0xaa, 0xac, 0x34, 0xa3, 0xf3, 0x9b, 0x65, 0x29, 0xb4, 0x5a, 0x56,
	0xc9, 0xaa, 0x96, 0x65, 0x48, 0x65, 0x59, 0x7c, 0x3a, 0x8d, 0x85, 0xd1, 0x69, 0x68, 0x8a, 0xc6,
	0xb4, 0xcc, 0x21, 0x34, 0x13, 0x3c, 0x8e, 0x2a, 0x7b, 0x03, 0xcb, 0xde, 0xd6, 0x80, 0xac, 0xf9,
	0x39, 0x74, 0x5e, 0x51, 0x9a, 0x9e, 0x26, 0xf1, 0xbc, 0x1c, 0xc4, 0x11, 0xd8, 0x45, 0x82, 0x2c,
	0x00, 0x0f, 0x6e, 0xf7, 0x77, 0x7b, 0x72, 0x66, 0xbd, 0x5f, 0x75, 0xf9, 0x90, 0x94, 0xb1, 0xf7,
	0x00, 0xba, 0x15, 0x95, 0xd5, 0xed, 0xf3, 0xbe, 0xd5, 0xc0, 0x39, 0x4d, 0x53, 0xca, 0xa2, 0x33,
	0xce, 0xc6, 0xf1, 0xe4, 0x9c, 0x89, 0xec, 0xfa, 0x8f, 0xf7, 0x25, 0xef, 0x60, 0x87, 0xf1, 0x88,
	0xca, 0x0e, 0x85, 0x81, 0x88, 0xe5, 0xae, 0xb2, 0x8f, 0x75, 0x99, 0x74, 0x84, 0x49, 0xab, 0x36,
	0xea, 0x5d, 0xc8, 0x9c, 0x61, 0x91, 0xa2, 0x57, 0xda, 0xac, 0x8a, 0xb9, 0x11, 0x90, 0x9b, 0x24,
	0xd2, 0x81, 0xfa, 0x07, 0x7a, 0x8d, 0x07, 0x6b, 0xfa, 0x2a, 0x24, 0xc7, 0xb0, 0x31, 0x0f, 0x92,
	0x19, 0xc5, 0xf9, 0xd9, 0x7d, 0xef, 0xf7, 0xfb, 0xfa, 0x3a, 0xe1, 0xa4, 0x76, 0x6c, 0xb9, 0xcf,
	0xa0, 0xa1, 0x20, 0xd5, 0xa9, 0x2b, 0x9e, 0x0b, 0x23, 0x8c, 0xb1, 0xc2, 0x52, 0x9e, 0x09, 0x73,
	0x31, 0x30, 0x26, 0x3b, 0x50, 0x93, 0x23, 0xac, 0x23, 0x4b, 0x46, 0xde, 0x57, 0x0b, 0xf6, 0xf5,
	0x66, 0xf2, 0x3a, 0xfc, 0x65, 0x2b, 0x9f, 0xc2, 0x16, 0x95, 0x0a, 0x31, 0x2d, 0x7a, 0x78, 0xaf,
	0x52, 0xcb, 0x92, 0x7c, 0xaf, 0xfc, 0x2e, 0x72, 0xdc, 0x3e, 0x6c, 0x17, 0xa0, 0x6a, 0x53, 0x38,
	0x8d, 0x8a, 0x36, 0xc9, 0x90, 0xfc, 0x53, 0x6d, 0x53, 0xcb, 0xb4, 0xc0, 0x3b, 0x83, 0x3d, 0x2d,
	0x6f, 0xb4, 0xd7, 0xd8, 0xce, 0x81, 0xad, 0x7c, 0x16, 0x86, 0x34, 0xcf, 0x8d, 0xe3, 0x8a, 0x4f,
	0xef, 0x87, 0x05, 0x07, 0x03, 0x96, 0x8b, 0x20, 0x49, 0x2e, 0x59, 0x90, 0xe6, 0x57, 0x5c, 0xac,
	0x7b, 0x50, 0x16, 0xcc, 0x50, 0x5b, 0x34, 0x03, 0xe9, 0xc1, 0x1e, 0xbe, 0x23, 0x31, 0x0b, 0x93,
	0x59, 0x44, 0x23, 0xe3, 0x29, 0x6d, 0xbb, 0xae, 0x5a, 0x1a, 0x98, 0x15, 0xed, 0xac, 0x47, 0x40,
	0x16, 0xf9, 0xb8, 0x9d, 0xb6, 0x60, 0xa7, 0x4a, 0x47, 0xab, 0x1e, 0xc0, 0x26, 0x1f, 0x8f, 0x73,
	0x2a, 0xd0, 0x84, 0x6d, 0xdf, 0x7c, 0xa9, 0x63, 0xca, 0x07, 0x28, 0x70, 0x36, 0xb1, 0x37, 0x18,
	0x23, 0xc6, 0x19, 0x75, 0xb6, 0xb0, 0x58, 0x8c, 0xbd, 0xc7, 0xf0, 0xef, 0x8d, 0x42, 0x57, 0xb7,
	0xac, 0xff, 0xbd, 0x06, 0xe0, 0xa7, 0xe1, 0xa5, 0x7e, 0x78, 0xc9, 0x09, 0x34, 0x4b, 0x8b, 0x92,
	0x7d, 0x9c, 0xed, 0xb2, 0xf1, 0xdd, 0x83, 0x65, 0xd8, 0xc8, 0xbf, 0x84, 0xce, 0xc2, 0x3d, 0x90,
	0x03, 0x27, 0xee, 0xea, 0xeb, 0xe1, 0x3a, 0x95, 0xb5, 0xc5, 0xd9, 0x5e, 0xc0, 0xde, 0x9b, 0x54,
	0x3d, 0xb7, 0xda, 0x1d, 0xb3, 0x0c, 0xed, 0x45, 0xfe, 0x5f, 0xeb, 0x9b, 0x35, 0x7a, 0x7d, 0xb0,
	0xcf, 0x13, 0x1a, 0x0a, 0x7d, 0xa9, 0x49, 0x07, 0x89, 0x95, 0x9f, 0x8a, 0xdb, 0xad, 0x20, 0x26,
	0x67, 0x08, 0xbb, 0x4b, 0x7d, 0x24, 0x87, 0xc8, 0xba, 0xfd, 0x1a, 0xb9, 0xff, 0xdd, 0xbe, 0xa8,
	0xd5, 0xde, 0x6f, 0xe2, 0x1f, 0xed, 0xc9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x58, 0x1f,
	0x9a, 0xe6, 0x06, 0x00, 0x00,
}
